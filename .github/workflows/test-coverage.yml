name: Test Coverage

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read

jobs:
  test-coverage:
    name: Test Coverage Analysis
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Get dependencies
      run: go mod download
      
    - name: Run tests with coverage
      run: |
        go test -v -coverprofile=coverage.out -covermode=atomic ./...
        
    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out -o coverage.txt
        
    - name: Calculate coverage percentage
      id: coverage
      shell: bash
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"
        
        # Check if coverage meets minimum threshold (80%)
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "‚ùå Coverage $COVERAGE% is below minimum threshold of 80%"
          echo "status=failure" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Coverage $COVERAGE% meets minimum threshold of 80%"
          echo "status=success" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html
          coverage.txt
          
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverage = '${{ steps.coverage.outputs.percentage }}';
          const status = '${{ steps.coverage.outputs.status }}';
          
          const coverageReport = fs.readFileSync('coverage.txt', 'utf8');
          const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
          const threshold = status === 'success' ? 'meets' : 'below';
          
          const comment = `## ${emoji} Test Coverage Report
          
          **Coverage: ${coverage}%** (${threshold} 80% threshold)
          
          <details>
          <summary>üìä Coverage Details</summary>
          
          \`\`\`
          ${coverageReport}
          \`\`\`
          
          </details>
          
          üìà **Coverage Trend**: Track coverage changes in the [Actions tab](https://github.com/${{ github.repository }}/actions)
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: Fail if coverage below threshold
      if: steps.coverage.outputs.status == 'failure'
      run: |
        echo "::error::Test coverage ${{ steps.coverage.outputs.percentage }}% is below minimum threshold of 80%"
        exit 1

  benchmark:
    name: Performance Benchmarks  
    runs-on: windows-latest
    needs: test-coverage
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Get dependencies
      run: go mod download
      
    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -run=^Benchmark ./... > benchmark.txt
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt
        
    - name: Comment benchmark results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const benchmarkResults = fs.readFileSync('benchmark.txt', 'utf8');
            
            const comment = `## üöÄ Performance Benchmark Results
            
            <details>
            <summary>üìä Benchmark Details</summary>
            
            \`\`\`
            ${benchmarkResults}
            \`\`\`
            
            </details>
            
            **Note**: Compare with baseline performance to identify regressions.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('No benchmark results to report');
          }